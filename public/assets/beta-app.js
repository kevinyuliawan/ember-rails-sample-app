eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"beta-app/adapters/application\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DS.ActiveModelAdapter.extend({\n      host: \'http://localhost:3000\'\n    });\n  });//# sourceURL=beta-app/adapters/application.js");

;eval("define(\"beta-app/adapters/signup\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    // export default DS.FixtureAdapter.extend(); //for fixtures in models/signup.js , eventually change to Mailchimp API\n\n\n    __exports__[\"default\"] = DS.RESTAdapter.extend({\n\n      createRecord: function(store, type, record){ // signup.save();\n        /* not needed since apikey and ID are given by rails server\n        var data = {\n          \"apikey\" : \"10fd04cf074e985b4ae10acdb68082c8-us9\",\n          \"id\" : \"bbc3858cd3\"\n        };\n        */\n        var data = this.serialize(record);\n        data[\"list_id\"] = \"bbc3858cd3\";\n        return this.ajax(\"lists/bbc3858cd3/subscribe\", \"POST\", {data: data, dataType: \'json\', contentType: \'application/json; charset=UTF-8\' }); // POST to list_id/subscribe\n      },\n\n      findAll: function(store, type, sinceToken){ // store.find(\'signup\')\n        /* not needed since apikey and ID are given by rails server\n        var data = {\n          \"apikey\" : \"10fd04cf074e985b4ae10acdb68082c8-us9\",\n          \"id\" : \"bbc3858cd3\"\n        };\n        */\n        var data = {};\n        if (sinceToken) {\n          data[\"since\"] = sinceToken;\n        };\n\n        return this.ajax(\"lists/bbc3858cd3.json\", \'GET\', { data: data, dataType: \'json\', contentType: \'application/json; charset=UTF-8\' });\n      }\n    });\n  });//# sourceURL=beta-app/adapters/signup.js");

;eval("define(\"beta-app/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"beta-app/config/environment\",\"ember-data\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n    var DS = __dependency5__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=beta-app/app.js");

;eval("define(\"beta-app/controllers/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.ArrayController.extend({\n\n      actions: {\n        createSignup: function(){\n\n          // remove errors\n          $(\'#emailField\').removeClass(\"has-error\");\n          $(\"#showWarning\").hide();\n\n          // get user input\n          var email = this.get(\'newEmail\');\n\n          // validate name and email first\n          if (validateEmail(email)){\n            // create the new Signup model\n            var signup = this.store.createRecord(\'signup\', {\n              email: email\n            });\n\n            // save the new model\n            //  even though I have the rails server returning a 302 Found header, the showSuccess function is still not firing and instead moves onto the failure function. so for now it\'s going to go to the success function either way\n            //signup.save().then(showSuccess).catch(failure);\n            signup.save();\n            showSuccess();\n          }\n          else{\n            //add errors\n            if(!validateEmail(email)){ $(\'#emailField\').addClass(\"has-error\")};\n            $(\"#showWarning\").fadeIn(1500);\n          };\n        } //end createSignup\n      }, // end actions\n\n    });\n\n    function validateEmail(email){\n        var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return re.test(email);\n    };\n\n    function showSuccess(){\n      $(\'#modal-submit\').modal(\'toggle\');\n      $(\"#emailField\").children().prop(\'disabled\', true);\n    };\n\n    function failure(reason){ //if email fails to save in mailchimp\n      $(\"#showWarning\").fadeIn(1500);\n      console.log(reason); //diagnostic purposes\n    };\n  });//# sourceURL=beta-app/controllers/index.js");

;eval("define(\"beta-app/controllers/signup\", \n  [],\n  function() {\n    \"use strict\";\n\n  });//# sourceURL=beta-app/controllers/signup.js");

;eval("define(\"beta-app/initializers/export-application-global\", \n  [\"ember\",\"beta-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=beta-app/initializers/export-application-global.js");

;eval("define(\"beta-app/models/signup\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    var Signup = DS.Model.extend({\n      email: DS.attr(\'string\')\n    });\n\n    Signup.reopenClass({\n      FIXTURES: [\n        {\n          id: 1,\n          email: \'john@gmail.com\'\n        },\n        {\n          id: 2,\n          email: \'jane@gmail.com\'\n        },\n        {\n          id: 3,\n          email: \'obama@whitehouse.gov\'\n        }\n      ]\n    });\n\n    __exports__[\"default\"] = Signup;\n  });//# sourceURL=beta-app/models/signup.js");

;eval("define(\"beta-app/router\", \n  [\"ember\",\"beta-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function(){\n      this.route(\'index\', {path: \'/\'});\n\n      this.resource(\'signups\', function(){\n        this.route(\'index\', {path:\'/\' });\n      });\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=beta-app/router.js");

;eval("define(\"beta-app/routes/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n      renderTemplate: function(controller){\n        this.render(\'index\', {controller: \'index\'});\n      }\n    });\n  });//# sourceURL=beta-app/routes/index.js");

;eval("define(\"beta-app/routes/signups\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n      model: function(){\n        return this.store.find(\'signup\');\n      }\n    });\n  });//# sourceURL=beta-app/routes/signups.js");

;eval("define(\"beta-app/serializers/signup\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DS.RESTSerializer.extend({\n      extractArray: function(store, type, payload){\n        var data = {signups: payload};\n        return this._super(store, type, data);\n      }\n    });\n  });//# sourceURL=beta-app/serializers/signup.js");

;eval("define(\"beta-app/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1;\n\n\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=beta-app/templates/application.js");

;eval("define(\"beta-app/templates/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"All Signups\");\n      }\n\n      data.buffer.push(\"<form class=\\\"form-signin\\\" role=\\\"form\\\">\\n          <h2 class=\\\"form-signin-heading\\\">Sign up</h2>\\n\\n        <div class=\\\"alert alert-info customalert\\\" id=\\\"showWarning\\\" style=\\\"display:none;\\\"><strong>Heads up!</strong> Please make sure that you have provided a valid e-mail and one that is not already signed up with Inbox Health.</div>\\n\\n          <div class=\\\"form-group\\\" id=\\\"emailField\\\">\\n            \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"email\"),\n        \'class\': (\"form-control\"),\n        \'placeholder\': (\"Email address\"),\n        \'value\': (\"newEmail\")\n      },hashTypes:{\'type\': \"STRING\",\'class\': \"STRING\",\'placeholder\': \"STRING\",\'value\': \"ID\"},hashContexts:{\'type\': depth0,\'class\': depth0,\'placeholder\': depth0,\'value\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\n          </div>\\n\\n          <button class=\\\"btn btn-lg btn-primary btn-block\\\" type=\\\"submit\\\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"createSignup\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Register</button>\\n\\n          <br>\\n          <p>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{\n        \'activeClass\': (\"selected\")\n      },hashTypes:{\'activeClass\': \"STRING\"},hashContexts:{\'activeClass\': depth0},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"signups.index\", options) : helperMissing.call(depth0, \"link-to\", \"signups.index\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n        </form>\\n\\n      <!-- Small modal -->\\n      <div class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"mySmallModalLabel\\\" aria-hidden=\\\"true\\\" id=\\\"modal-submit\\\">\\n        <div class=\\\"modal-dialog modal-sm\\\">\\n          <div class=\\\"modal-content\\\">\\n            <div class=\\\"modal-header\\\">\\n              <h4>Submission successful!</h4>\\n            </div>\\n            <div class=\\\"modal-body\\\">\\n              <p>Thanks for signing up with Inbox Health! A confirmation message has been sent to the e-mail you provided.</p>\\n            </div>\\n            <div class=\\\"modal-footer\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\">Close</button>\\n            </div>\\n          </div>\\n        </div>\\n      </div><!-- /end modal -->\");\n      return buffer;\n      \n    });\n  });//# sourceURL=beta-app/templates/index.js");

;eval("define(\"beta-app/templates/signups/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n            <tr>\\n              <td>\");\n      stack1 = helpers._triageMustache.call(depth0, \"_view.contentIndex\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</td>\\n              <td>\");\n      stack1 = helpers._triageMustache.call(depth0, \"signup.id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</td>\\n              <td>\");\n      stack1 = helpers._triageMustache.call(depth0, \"signup.email\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</td>\\n            </tr>\\n          \");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      \n      data.buffer.push(\"Back\");\n      }\n\n      data.buffer.push(\"<div class=\\\"col-lg-6\\\">\\n        <table class=\\\"table table-striped\\\">\\n        <thead>\\n          <tr>\\n            <th>#</th>\\n            <th>ID</th>\\n            <th>Email</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          \");\n      stack1 = helpers.each.call(depth0, \"signup\", \"in\", \"model\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n        </tbody>\\n      </table>\\n      <p>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{\n        \'activeClass\': (\"selected\")\n      },hashTypes:{\'activeClass\': \"STRING\"},hashContexts:{\'activeClass\': depth0},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"index\", options) : helperMissing.call(depth0, \"link-to\", \"index\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    </div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=beta-app/templates/signups/index.js");

;eval("define(\"beta-app/tests/adapters/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/application.js should pass jshint\', function() { \n      ok(true, \'adapters/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=beta-app/tests/adapters/application.jshint.js");

;eval("define(\"beta-app/tests/adapters/signup.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/signup.js should pass jshint\', function() { \n      ok(false, \'adapters/signup.js should pass jshint.\\nadapters/signup.js: line 30, col 6, Unnecessary semicolon.\\n\\n1 error\'); \n    });\n  });//# sourceURL=beta-app/tests/adapters/signup.jshint.js");

;eval("define(\"beta-app/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(false, \'app.js should pass jshint.\\napp.js: line 5, col 8, \\\'DS\\\' is defined but never used.\\n\\n1 error\'); \n    });\n  });//# sourceURL=beta-app/tests/app.jshint.js");

;eval("define(\"beta-app/tests/beta-app/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - beta-app/tests/helpers\');\n    test(\'beta-app/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'beta-app/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=beta-app/tests/beta-app/tests/helpers/resolver.jshint.js");

;eval("define(\"beta-app/tests/beta-app/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - beta-app/tests/helpers\');\n    test(\'beta-app/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'beta-app/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=beta-app/tests/beta-app/tests/helpers/start-app.jshint.js");

;eval("define(\"beta-app/tests/beta-app/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - beta-app/tests\');\n    test(\'beta-app/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'beta-app/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=beta-app/tests/beta-app/tests/test-helper.jshint.js");

;eval("define(\"beta-app/tests/controllers/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/index.js should pass jshint\', function() { \n      ok(false, \'controllers/index.js should pass jshint.\\ncontrollers/index.js: line 30, col 74, Missing semicolon.\\ncontrollers/index.js: line 30, col 75, Unnecessary semicolon.\\ncontrollers/index.js: line 32, col 8, Unnecessary semicolon.\\ncontrollers/index.js: line 41, col 2, Unnecessary semicolon.\\ncontrollers/index.js: line 46, col 2, Unnecessary semicolon.\\ncontrollers/index.js: line 51, col 2, Unnecessary semicolon.\\ncontrollers/index.js: line 9, col 7, \\\'$\\\' is not defined.\\ncontrollers/index.js: line 10, col 7, \\\'$\\\' is not defined.\\ncontrollers/index.js: line 30, col 36, \\\'$\\\' is not defined.\\ncontrollers/index.js: line 31, col 9, \\\'$\\\' is not defined.\\ncontrollers/index.js: line 44, col 3, \\\'$\\\' is not defined.\\ncontrollers/index.js: line 45, col 3, \\\'$\\\' is not defined.\\ncontrollers/index.js: line 49, col 3, \\\'$\\\' is not defined.\\ncontrollers/index.js: line 48, col 10, \\\'failure\\\' is defined but never used.\\n\\n14 errors\'); \n    });\n  });//# sourceURL=beta-app/tests/controllers/index.jshint.js");

;eval("define(\"beta-app/tests/controllers/signup.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/signup.js should pass jshint\', function() { \n      ok(true, \'controllers/signup.js should pass jshint.\'); \n    });\n  });//# sourceURL=beta-app/tests/controllers/signup.jshint.js");

;eval("define(\"beta-app/tests/helpers/resolver\", \n  [\"ember/resolver\",\"beta-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=beta-app/tests/helpers/resolver.js");

;eval("define(\"beta-app/tests/helpers/start-app\", \n  [\"ember\",\"beta-app/app\",\"beta-app/router\",\"beta-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=beta-app/tests/helpers/start-app.js");

;eval("define(\"beta-app/tests/models/signup.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/signup.js should pass jshint\', function() { \n      ok(true, \'models/signup.js should pass jshint.\'); \n    });\n  });//# sourceURL=beta-app/tests/models/signup.jshint.js");

;eval("define(\"beta-app/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=beta-app/tests/router.jshint.js");

;eval("define(\"beta-app/tests/routes/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/index.js should pass jshint\', function() { \n      ok(false, \'routes/index.js should pass jshint.\\nroutes/index.js: line 4, col 28, \\\'controller\\\' is defined but never used.\\n\\n1 error\'); \n    });\n  });//# sourceURL=beta-app/tests/routes/index.jshint.js");

;eval("define(\"beta-app/tests/routes/signups.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/signups.js should pass jshint\', function() { \n      ok(true, \'routes/signups.js should pass jshint.\'); \n    });\n  });//# sourceURL=beta-app/tests/routes/signups.jshint.js");

;eval("define(\"beta-app/tests/serializers/signup.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - serializers\');\n    test(\'serializers/signup.js should pass jshint\', function() { \n      ok(true, \'serializers/signup.js should pass jshint.\'); \n    });\n  });//# sourceURL=beta-app/tests/serializers/signup.jshint.js");

;eval("define(\"beta-app/tests/test-helper\", \n  [\"beta-app/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=beta-app/tests/test-helper.js");

/* jshint ignore:start */

define('beta-app/config/environment', ['ember'], function(Ember) {
  var prefix = 'beta-app';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */


});

if (runningTests) {
  require('beta-app/tests/test-helper');
} else {
  require('beta-app/app')['default'].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}

/* jshint ignore:end */
